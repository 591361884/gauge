// Code generated by protoc-gen-go.
// source: api_v2.proto
// DO NOT EDIT!

package gauge_messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Types of log level that gauge supports
type ExecutionRequest_LogLevel int32

const (
	ExecutionRequest_INFO    ExecutionRequest_LogLevel = 0
	ExecutionRequest_DEBUG   ExecutionRequest_LogLevel = 1
	ExecutionRequest_WARNING ExecutionRequest_LogLevel = 2
	ExecutionRequest_ERROR   ExecutionRequest_LogLevel = 3
)

var ExecutionRequest_LogLevel_name = map[int32]string{
	0: "INFO",
	1: "DEBUG",
	2: "WARNING",
	3: "ERROR",
}
var ExecutionRequest_LogLevel_value = map[string]int32{
	"INFO":    0,
	"DEBUG":   1,
	"WARNING": 2,
	"ERROR":   3,
}

func (x ExecutionRequest_LogLevel) String() string {
	return proto.EnumName(ExecutionRequest_LogLevel_name, int32(x))
}
func (ExecutionRequest_LogLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

// Strategies for parallelization
type ExecutionRequest_Strategy int32

const (
	ExecutionRequest_LAZY  ExecutionRequest_Strategy = 0
	ExecutionRequest_EAGER ExecutionRequest_Strategy = 1
)

var ExecutionRequest_Strategy_name = map[int32]string{
	0: "LAZY",
	1: "EAGER",
}
var ExecutionRequest_Strategy_value = map[string]int32{
	"LAZY":  0,
	"EAGER": 1,
}

func (x ExecutionRequest_Strategy) String() string {
	return proto.EnumName(ExecutionRequest_Strategy_name, int32(x))
}
func (ExecutionRequest_Strategy) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1} }

// Types of Execution result
type ExecutionResult_ExecutionResultType int32

const (
	ExecutionResult_ScenarioResult           ExecutionResult_ExecutionResultType = 0
	ExecutionResult_BeforeSuiteHookResult    ExecutionResult_ExecutionResultType = 1
	ExecutionResult_AfterSuiteHookResult     ExecutionResult_ExecutionResultType = 2
	ExecutionResult_BeforeSpecHookResult     ExecutionResult_ExecutionResultType = 3
	ExecutionResult_AfterSpecHookResult      ExecutionResult_ExecutionResultType = 4
	ExecutionResult_SuiteDataStoreInitResult ExecutionResult_ExecutionResultType = 5
	ExecutionResult_SpecDataStoreInitResult  ExecutionResult_ExecutionResultType = 6
	ExecutionResult_ValidationResult         ExecutionResult_ExecutionResultType = 7
)

var ExecutionResult_ExecutionResultType_name = map[int32]string{
	0: "ScenarioResult",
	1: "BeforeSuiteHookResult",
	2: "AfterSuiteHookResult",
	3: "BeforeSpecHookResult",
	4: "AfterSpecHookResult",
	5: "SuiteDataStoreInitResult",
	6: "SpecDataStoreInitResult",
	7: "ValidationResult",
}
var ExecutionResult_ExecutionResultType_value = map[string]int32{
	"ScenarioResult":           0,
	"BeforeSuiteHookResult":    1,
	"AfterSuiteHookResult":     2,
	"BeforeSpecHookResult":     3,
	"AfterSpecHookResult":      4,
	"SuiteDataStoreInitResult": 5,
	"SpecDataStoreInitResult":  6,
	"ValidationResult":         7,
}

func (x ExecutionResult_ExecutionResultType) String() string {
	return proto.EnumName(ExecutionResult_ExecutionResultType_name, int32(x))
}
func (ExecutionResult_ExecutionResultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 0}
}

// Specifies the execution status
type ExecutionResult_Status int32

const (
	ExecutionResult_PASSED  ExecutionResult_Status = 0
	ExecutionResult_FAILED  ExecutionResult_Status = 1
	ExecutionResult_SKIPPED ExecutionResult_Status = 2
)

var ExecutionResult_Status_name = map[int32]string{
	0: "PASSED",
	1: "FAILED",
	2: "SKIPPED",
}
var ExecutionResult_Status_value = map[string]int32{
	"PASSED":  0,
	"FAILED":  1,
	"SKIPPED": 2,
}

func (x ExecutionResult_Status) String() string {
	return proto.EnumName(ExecutionResult_Status_name, int32(x))
}
func (ExecutionResult_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 1} }

// ExecutionRequest defines the structure of requests that the API's consumers can send to request execution of specs/scenarios
type ExecutionRequest struct {
	// Each ExecutionRequest can ask to execute multiple spec files or multiple scenarios in a spec or a directory or all
	Specs []string `protobuf:"bytes,1,rep,name=specs" json:"specs,omitempty"`
	// Tag expression to filter specs and scenarios during execution. Default: ""
	Tags string `protobuf:"bytes,2,opt,name=tags" json:"tags,omitempty"`
	// The working directory for gauge.
	WorkingDir string `protobuf:"bytes,3,opt,name=workingDir" json:"workingDir,omitempty"`
	// Environment to choose for gauge.
	Environment string                    `protobuf:"bytes,4,opt,name=environment" json:"environment,omitempty"`
	LogLevel    ExecutionRequest_LogLevel `protobuf:"varint,5,opt,name=logLevel,enum=gauge.messages.ExecutionRequest_LogLevel" json:"logLevel,omitempty"`
	// Whether to run gauge in parallel mode.
	IsParallel bool `protobuf:"varint,6,opt,name=isParallel" json:"isParallel,omitempty"`
	// If isParallel is true, this specifies how many parallel streams to run.
	ParallelStreams int32 `protobuf:"varint,7,opt,name=parallelStreams" json:"parallelStreams,omitempty"`
	// Specify which group of specs to execute, based on number of parallel streams. Works only when strategy is EAGER.
	Group int32 `protobuf:"varint,8,opt,name=group" json:"group,omitempty"`
	// Toggles simple console reporting
	SimpleConsole bool `protobuf:"varint,9,opt,name=simpleConsole" json:"simpleConsole,omitempty"`
	// If true, sorts execution of specifications alphabetically
	Sort     bool                      `protobuf:"varint,10,opt,name=sort" json:"sort,omitempty"`
	Strategy ExecutionRequest_Strategy `protobuf:"varint,11,opt,name=strategy,enum=gauge.messages.ExecutionRequest_Strategy" json:"strategy,omitempty"`
	// Specify against which rows of datatable the scenarios should be executed
	TableRows string `protobuf:"bytes,12,opt,name=tableRows" json:"tableRows,omitempty"`
}

func (m *ExecutionRequest) Reset()                    { *m = ExecutionRequest{} }
func (m *ExecutionRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecutionRequest) ProtoMessage()               {}
func (*ExecutionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// ExecutionResult defines the structure of response for ExecutionRequest message
type ExecutionResult struct {
	Type ExecutionResult_ExecutionResultType `protobuf:"varint,1,opt,name=type,enum=gauge.messages.ExecutionResult_ExecutionResultType" json:"type,omitempty"`
	// An identifier for the current execution result
	ID     string                 `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	Status ExecutionResult_Status `protobuf:"varint,3,opt,name=status,enum=gauge.messages.ExecutionResult_Status" json:"status,omitempty"`
	// Contains the Execution error and its details
	Error []*ExecutionError `protobuf:"bytes,4,rep,name=error" json:"error,omitempty"`
	// Specifies the execution time
	ExecutionTime int64 `protobuf:"varint,5,opt,name=executionTime" json:"executionTime,omitempty"`
	// Contains the console output messages
	Stdout string `protobuf:"bytes,6,opt,name=stdout" json:"stdout,omitempty"`
}

func (m *ExecutionResult) Reset()                    { *m = ExecutionResult{} }
func (m *ExecutionResult) String() string            { return proto.CompactTextString(m) }
func (*ExecutionResult) ProtoMessage()               {}
func (*ExecutionResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ExecutionResult) GetError() []*ExecutionError {
	if m != nil {
		return m.Error
	}
	return nil
}

// ExecutionError represents the failure during execution along with details of failure
type ExecutionError struct {
	// / Stacktrace from the failure
	StackTrace string `protobuf:"bytes,1,opt,name=stackTrace" json:"stackTrace,omitempty"`
	// / Error message from the failure
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage" json:"errorMessage,omitempty"`
	// / Byte array holding the screenshot taken at the time of failure.
	ScreenShot []byte `protobuf:"bytes,3,opt,name=screenShot,proto3" json:"screenShot,omitempty"`
}

func (m *ExecutionError) Reset()                    { *m = ExecutionError{} }
func (m *ExecutionError) String() string            { return proto.CompactTextString(m) }
func (*ExecutionError) ProtoMessage()               {}
func (*ExecutionError) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func init() {
	proto.RegisterType((*ExecutionRequest)(nil), "gauge.messages.ExecutionRequest")
	proto.RegisterType((*ExecutionResult)(nil), "gauge.messages.ExecutionResult")
	proto.RegisterType((*ExecutionError)(nil), "gauge.messages.ExecutionError")
	proto.RegisterEnum("gauge.messages.ExecutionRequest_LogLevel", ExecutionRequest_LogLevel_name, ExecutionRequest_LogLevel_value)
	proto.RegisterEnum("gauge.messages.ExecutionRequest_Strategy", ExecutionRequest_Strategy_name, ExecutionRequest_Strategy_value)
	proto.RegisterEnum("gauge.messages.ExecutionResult_ExecutionResultType", ExecutionResult_ExecutionResultType_name, ExecutionResult_ExecutionResultType_value)
	proto.RegisterEnum("gauge.messages.ExecutionResult_Status", ExecutionResult_Status_name, ExecutionResult_Status_value)
}

var fileDescriptor1 = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0xe3, 0x7c, 0x79, 0x92, 0xa6, 0x66, 0xdb, 0xaa, 0xe6, 0x43, 0xb4, 0xf2, 0x01, 0x95,
	0x43, 0x23, 0x94, 0x4a, 0x70, 0xe0, 0xe4, 0x12, 0xb7, 0x44, 0x84, 0x34, 0xb2, 0x0b, 0x08, 0x24,
	0x84, 0xb6, 0xe9, 0xd4, 0x58, 0x75, 0xbc, 0x66, 0x77, 0xdd, 0xd2, 0x2b, 0xbf, 0x84, 0xdf, 0xc6,
	0x2f, 0x61, 0xbd, 0x31, 0xfd, 0x88, 0x0a, 0xe1, 0xe6, 0x99, 0xb7, 0x6f, 0xe7, 0xcd, 0xbc, 0x59,
	0x43, 0x9b, 0x66, 0xf1, 0x97, 0xf3, 0x5e, 0x37, 0xe3, 0x4c, 0x32, 0xd2, 0x89, 0x68, 0x1e, 0x61,
	0x77, 0x8a, 0x42, 0xd0, 0x08, 0x85, 0xfb, 0xd3, 0x04, 0xdb, 0xff, 0x8e, 0x93, 0x5c, 0xc6, 0x2c,
	0x0d, 0xf0, 0x5b, 0x8e, 0x42, 0x92, 0x65, 0xa8, 0x89, 0x0c, 0x27, 0xc2, 0x31, 0xb6, 0xcc, 0x6d,
	0x8b, 0xb4, 0xa1, 0x2a, 0x69, 0x24, 0x9c, 0xca, 0x96, 0xa1, 0x22, 0x02, 0x70, 0xc1, 0xf8, 0x59,
	0x9c, 0x46, 0xfd, 0x98, 0x3b, 0xa6, 0xce, 0xad, 0x42, 0x0b, 0xd3, 0xf3, 0x98, 0xb3, 0x74, 0x8a,
	0xa9, 0x74, 0xaa, 0x3a, 0xf9, 0x12, 0x9a, 0x09, 0x8b, 0x86, 0x78, 0x8e, 0x89, 0x53, 0x53, 0x99,
	0x4e, 0xef, 0x69, 0xf7, 0x76, 0xf5, 0xee, 0x7c, 0xe5, 0xee, 0xb0, 0x24, 0x14, 0x55, 0x62, 0x31,
	0xa6, 0x9c, 0x26, 0x89, 0xa2, 0xd7, 0x15, 0xbd, 0x49, 0x36, 0x60, 0x25, 0x2b, 0x33, 0xa1, 0xe4,
	0x48, 0xa7, 0xc2, 0x69, 0x28, 0xa0, 0x56, 0xe8, 0x8d, 0x38, 0xcb, 0x33, 0xa7, 0xa9, 0xc3, 0x75,
	0x58, 0x16, 0xf1, 0x34, 0x4b, 0xf0, 0x15, 0x4b, 0x05, 0x4b, 0xd0, 0xb1, 0x34, 0x5d, 0xb5, 0x21,
	0x18, 0x97, 0x0e, 0xe8, 0x48, 0xa9, 0x13, 0x92, 0x53, 0x89, 0xd1, 0xa5, 0xd3, 0xfa, 0x4f, 0x75,
	0x61, 0x49, 0x20, 0xf7, 0xc0, 0x92, 0xf4, 0x38, 0xc1, 0x80, 0x5d, 0x08, 0xa7, 0x5d, 0x74, 0xeb,
	0xbe, 0x80, 0xe6, 0x95, 0xf8, 0x26, 0x54, 0x07, 0xa3, 0xfd, 0x43, 0x7b, 0x89, 0x58, 0x50, 0xeb,
	0xfb, 0x7b, 0xef, 0x0e, 0x6c, 0x83, 0xb4, 0xa0, 0xf1, 0xc1, 0x0b, 0x46, 0x83, 0xd1, 0x81, 0x5d,
	0x29, 0xf2, 0x7e, 0x10, 0x1c, 0x06, 0xb6, 0xe9, 0x6e, 0x42, 0xf3, 0xea, 0x5e, 0x45, 0x1c, 0x7a,
	0x9f, 0x3e, 0xce, 0x88, 0xbe, 0x77, 0xe0, 0x07, 0xb6, 0xe1, 0xfe, 0xa8, 0xc2, 0xca, 0x0d, 0x29,
	0x22, 0x4f, 0x24, 0xf1, 0x94, 0x25, 0x97, 0x19, 0x2a, 0x83, 0x0a, 0xe5, 0xbb, 0xff, 0x50, 0x5e,
	0x1c, 0x9f, 0x8f, 0x8f, 0x14, 0x55, 0x0d, 0xb8, 0x32, 0xe8, 0x97, 0x9e, 0x3e, 0x87, 0xba, 0x90,
	0x54, 0xe6, 0x42, 0xfb, 0xd9, 0xe9, 0x3d, 0x59, 0x74, 0x61, 0xa8, 0x4f, 0x93, 0x1d, 0xa8, 0x21,
	0xe7, 0x8c, 0x2b, 0xc7, 0xcd, 0xed, 0x56, 0xef, 0xf1, 0x5f, 0x69, 0x7e, 0x71, 0xaa, 0x30, 0x06,
	0xff, 0x64, 0x8e, 0xe2, 0x29, 0xea, 0xb5, 0x30, 0x49, 0xa7, 0xa8, 0x7e, 0xc2, 0x72, 0xa9, 0x7d,
	0xb6, 0xdc, 0x5f, 0x06, 0xac, 0xde, 0xa5, 0x98, 0x40, 0x27, 0x9c, 0x60, 0x4a, 0x79, 0xcc, 0x66,
	0x59, 0x35, 0xa7, 0xfb, 0xb0, 0xbe, 0x87, 0xa7, 0x8c, 0x63, 0x98, 0xc7, 0x12, 0x5f, 0x33, 0x76,
	0x56, 0x42, 0x06, 0x71, 0x60, 0xcd, 0x3b, 0x95, 0xc8, 0xe7, 0x91, 0x4a, 0x81, 0x94, 0x24, 0xb5,
	0xe5, 0x37, 0x10, 0x53, 0xad, 0xd8, 0xea, 0x8c, 0x73, 0x1b, 0xa8, 0x92, 0x47, 0xe0, 0xe8, 0x7b,
	0xfa, 0x54, 0xd2, 0x50, 0x2a, 0xea, 0x20, 0x8d, 0x65, 0x89, 0xd6, 0xc8, 0x43, 0xd8, 0x28, 0x18,
	0x77, 0x81, 0x75, 0xb2, 0x06, 0xf6, 0x7b, 0x9a, 0xc4, 0x27, 0xf4, 0xba, 0x1d, 0xbb, 0xe1, 0xee,
	0x40, 0xbd, 0x1c, 0x22, 0x40, 0x7d, 0xec, 0x85, 0xa1, 0xdf, 0x57, 0xed, 0xa8, 0xef, 0x7d, 0x6f,
	0x30, 0x54, 0xdf, 0x7a, 0x61, 0xc2, 0x37, 0x83, 0xf1, 0x58, 0x05, 0x15, 0x77, 0x04, 0x9d, 0xb9,
	0x61, 0xaa, 0xb3, 0xca, 0xb3, 0xc9, 0xd9, 0x11, 0xa7, 0x93, 0xd9, 0x22, 0x58, 0xaa, 0x54, 0x5b,
	0xfb, 0xf1, 0x76, 0x66, 0xc0, 0xf5, 0x8b, 0x15, 0x13, 0x8e, 0x98, 0x86, 0x5f, 0x99, 0xd4, 0x0e,
	0xb7, 0x7b, 0x9f, 0xc1, 0xba, 0xba, 0x8f, 0x8c, 0xa1, 0x31, 0xf3, 0x05, 0xc9, 0xd6, 0xa2, 0x47,
	0xf0, 0x60, 0x73, 0xc1, 0x6e, 0xb8, 0x4b, 0xcf, 0x8c, 0xe3, 0xba, 0xfe, 0xdb, 0xec, 0xfe, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0x55, 0xfb, 0x7d, 0xf2, 0x7d, 0x04, 0x00, 0x00,
}
