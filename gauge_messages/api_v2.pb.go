// Code generated by protoc-gen-go.
// source: api_v2.proto
// DO NOT EDIT!

package gauge_messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Types of Execution result
type ExecutionResponse_ExecutionResponseType int32

const (
	ExecutionResponse_SuiteDataStoreInitResult ExecutionResponse_ExecutionResponseType = 0
	ExecutionResponse_SuiteStart               ExecutionResponse_ExecutionResponseType = 1
	ExecutionResponse_SpecDataStoreInitResult  ExecutionResponse_ExecutionResponseType = 2
	ExecutionResponse_SpecStart                ExecutionResponse_ExecutionResponseType = 3
	ExecutionResponse_ScenarioStart            ExecutionResponse_ExecutionResponseType = 4
	ExecutionResponse_ScenarioEnd              ExecutionResponse_ExecutionResponseType = 5
	ExecutionResponse_SpecEnd                  ExecutionResponse_ExecutionResponseType = 6
	ExecutionResponse_SuiteEnd                 ExecutionResponse_ExecutionResponseType = 7
	ExecutionResponse_ErrorResult              ExecutionResponse_ExecutionResponseType = 8
)

var ExecutionResponse_ExecutionResponseType_name = map[int32]string{
	0: "SuiteDataStoreInitResult",
	1: "SuiteStart",
	2: "SpecDataStoreInitResult",
	3: "SpecStart",
	4: "ScenarioStart",
	5: "ScenarioEnd",
	6: "SpecEnd",
	7: "SuiteEnd",
	8: "ErrorResult",
}
var ExecutionResponse_ExecutionResponseType_value = map[string]int32{
	"SuiteDataStoreInitResult": 0,
	"SuiteStart":               1,
	"SpecDataStoreInitResult":  2,
	"SpecStart":                3,
	"ScenarioStart":            4,
	"ScenarioEnd":              5,
	"SpecEnd":                  6,
	"SuiteEnd":                 7,
	"ErrorResult":              8,
}

func (x ExecutionResponse_ExecutionResponseType) Enum() *ExecutionResponse_ExecutionResponseType {
	p := new(ExecutionResponse_ExecutionResponseType)
	*p = x
	return p
}
func (x ExecutionResponse_ExecutionResponseType) String() string {
	return proto.EnumName(ExecutionResponse_ExecutionResponseType_name, int32(x))
}
func (x *ExecutionResponse_ExecutionResponseType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExecutionResponse_ExecutionResponseType_value, data, "ExecutionResponse_ExecutionResponseType")
	if err != nil {
		return err
	}
	*x = ExecutionResponse_ExecutionResponseType(value)
	return nil
}
func (ExecutionResponse_ExecutionResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 0}
}

// Specifies the execution status
type ExecutionResponse_Status int32

const (
	ExecutionResponse_PASSED  ExecutionResponse_Status = 0
	ExecutionResponse_FAILED  ExecutionResponse_Status = 1
	ExecutionResponse_SKIPPED ExecutionResponse_Status = 2
)

var ExecutionResponse_Status_name = map[int32]string{
	0: "PASSED",
	1: "FAILED",
	2: "SKIPPED",
}
var ExecutionResponse_Status_value = map[string]int32{
	"PASSED":  0,
	"FAILED":  1,
	"SKIPPED": 2,
}

func (x ExecutionResponse_Status) Enum() *ExecutionResponse_Status {
	p := new(ExecutionResponse_Status)
	*p = x
	return p
}
func (x ExecutionResponse_Status) String() string {
	return proto.EnumName(ExecutionResponse_Status_name, int32(x))
}
func (x *ExecutionResponse_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExecutionResponse_Status_value, data, "ExecutionResponse_Status")
	if err != nil {
		return err
	}
	*x = ExecutionResponse_Status(value)
	return nil
}
func (ExecutionResponse_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 1} }

// ExecutionRequest defines the structure of requests that the API's consumers can send to request execution of specs/scenarios
type ExecutionRequest struct {
	// Each ExecutionRequest can ask to execute multiple spec files or multiple scenarios in a spec or a directory or all
	Specs []string `protobuf:"bytes,1,rep,name=specs" json:"specs,omitempty"`
	// Contains all the flags required for execution
	Flags            []*ExecutionRequestFlag `protobuf:"bytes,2,rep,name=flags" json:"flags,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *ExecutionRequest) Reset()                    { *m = ExecutionRequest{} }
func (m *ExecutionRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecutionRequest) ProtoMessage()               {}
func (*ExecutionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ExecutionRequest) GetSpecs() []string {
	if m != nil {
		return m.Specs
	}
	return nil
}

func (m *ExecutionRequest) GetFlags() []*ExecutionRequestFlag {
	if m != nil {
		return m.Flags
	}
	return nil
}

// Store name and value for a specific flag
type ExecutionRequestFlag struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExecutionRequestFlag) Reset()                    { *m = ExecutionRequestFlag{} }
func (m *ExecutionRequestFlag) String() string            { return proto.CompactTextString(m) }
func (*ExecutionRequestFlag) ProtoMessage()               {}
func (*ExecutionRequestFlag) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *ExecutionRequestFlag) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ExecutionRequestFlag) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// ExecutionResponse defines the structure of response for ExecutionRequest message
type ExecutionResponse struct {
	Type *ExecutionResponse_ExecutionResponseType `protobuf:"varint,1,req,name=type,enum=gauge.messages.ExecutionResponse_ExecutionResponseType" json:"type,omitempty"`
	// An identifier for the current execution result
	ID     *string                   `protobuf:"bytes,2,opt,name=ID,json=iD" json:"ID,omitempty"`
	Status *ExecutionResponse_Status `protobuf:"varint,3,opt,name=status,enum=gauge.messages.ExecutionResponse_Status" json:"status,omitempty"`
	// Contains the Execution errors and its details
	Errors []*ExecutionResponse_ExecutionError `protobuf:"bytes,4,rep,name=errors" json:"errors,omitempty"`
	// Specifies the execution time
	ExecutionTime *int64 `protobuf:"varint,5,opt,name=executionTime" json:"executionTime,omitempty"`
	// Contains the console output messages
	Stdout *string `protobuf:"bytes,6,opt,name=stdout" json:"stdout,omitempty"`
	// Holds the pre hook failure
	PreHookFailure *ExecutionResponse_ExecutionError `protobuf:"bytes,7,opt,name=preHookFailure" json:"preHookFailure,omitempty"`
	// Holds the post hook failure
	PostHookFailure  *ExecutionResponse_ExecutionError `protobuf:"bytes,8,opt,name=postHookFailure" json:"postHookFailure,omitempty"`
	XXX_unrecognized []byte                            `json:"-"`
}

func (m *ExecutionResponse) Reset()                    { *m = ExecutionResponse{} }
func (m *ExecutionResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecutionResponse) ProtoMessage()               {}
func (*ExecutionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ExecutionResponse) GetType() ExecutionResponse_ExecutionResponseType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ExecutionResponse_SuiteDataStoreInitResult
}

func (m *ExecutionResponse) GetID() string {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return ""
}

func (m *ExecutionResponse) GetStatus() ExecutionResponse_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ExecutionResponse_PASSED
}

func (m *ExecutionResponse) GetErrors() []*ExecutionResponse_ExecutionError {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *ExecutionResponse) GetExecutionTime() int64 {
	if m != nil && m.ExecutionTime != nil {
		return *m.ExecutionTime
	}
	return 0
}

func (m *ExecutionResponse) GetStdout() string {
	if m != nil && m.Stdout != nil {
		return *m.Stdout
	}
	return ""
}

func (m *ExecutionResponse) GetPreHookFailure() *ExecutionResponse_ExecutionError {
	if m != nil {
		return m.PreHookFailure
	}
	return nil
}

func (m *ExecutionResponse) GetPostHookFailure() *ExecutionResponse_ExecutionError {
	if m != nil {
		return m.PostHookFailure
	}
	return nil
}

// ExecutionError represents the failure during execution along with details of failure
type ExecutionResponse_ExecutionError struct {
	// Stacktrace from the failure
	StackTrace *string `protobuf:"bytes,1,opt,name=stackTrace" json:"stackTrace,omitempty"`
	// Error message from the failure
	ErrorMessage *string `protobuf:"bytes,2,opt,name=errorMessage" json:"errorMessage,omitempty"`
	// Byte array holding the screenshot taken at the time of failure.
	ScreenShot       []byte `protobuf:"bytes,3,opt,name=screenShot" json:"screenShot,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExecutionResponse_ExecutionError) Reset()         { *m = ExecutionResponse_ExecutionError{} }
func (m *ExecutionResponse_ExecutionError) String() string { return proto.CompactTextString(m) }
func (*ExecutionResponse_ExecutionError) ProtoMessage()    {}
func (*ExecutionResponse_ExecutionError) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 0}
}

func (m *ExecutionResponse_ExecutionError) GetStackTrace() string {
	if m != nil && m.StackTrace != nil {
		return *m.StackTrace
	}
	return ""
}

func (m *ExecutionResponse_ExecutionError) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *ExecutionResponse_ExecutionError) GetScreenShot() []byte {
	if m != nil {
		return m.ScreenShot
	}
	return nil
}

func init() {
	proto.RegisterType((*ExecutionRequest)(nil), "gauge.messages.ExecutionRequest")
	proto.RegisterType((*ExecutionRequestFlag)(nil), "gauge.messages.ExecutionRequest.flag")
	proto.RegisterType((*ExecutionResponse)(nil), "gauge.messages.ExecutionResponse")
	proto.RegisterType((*ExecutionResponse_ExecutionError)(nil), "gauge.messages.ExecutionResponse.ExecutionError")
	proto.RegisterEnum("gauge.messages.ExecutionResponse_ExecutionResponseType", ExecutionResponse_ExecutionResponseType_name, ExecutionResponse_ExecutionResponseType_value)
	proto.RegisterEnum("gauge.messages.ExecutionResponse_Status", ExecutionResponse_Status_name, ExecutionResponse_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Execution service

type ExecutionClient interface {
	// Bind RPC method
	Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (Execution_ExecuteClient, error)
}

type executionClient struct {
	cc *grpc.ClientConn
}

func NewExecutionClient(cc *grpc.ClientConn) ExecutionClient {
	return &executionClient{cc}
}

func (c *executionClient) Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (Execution_ExecuteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Execution_serviceDesc.Streams[0], c.cc, "/gauge.messages.Execution/execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &executionExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Execution_ExecuteClient interface {
	Recv() (*ExecutionResponse, error)
	grpc.ClientStream
}

type executionExecuteClient struct {
	grpc.ClientStream
}

func (x *executionExecuteClient) Recv() (*ExecutionResponse, error) {
	m := new(ExecutionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Execution service

type ExecutionServer interface {
	// Bind RPC method
	Execute(*ExecutionRequest, Execution_ExecuteServer) error
}

func RegisterExecutionServer(s *grpc.Server, srv ExecutionServer) {
	s.RegisterService(&_Execution_serviceDesc, srv)
}

func _Execution_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecutionServer).Execute(m, &executionExecuteServer{stream})
}

type Execution_ExecuteServer interface {
	Send(*ExecutionResponse) error
	grpc.ServerStream
}

type executionExecuteServer struct {
	grpc.ServerStream
}

func (x *executionExecuteServer) Send(m *ExecutionResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Execution_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gauge.messages.Execution",
	HandlerType: (*ExecutionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execute",
			Handler:       _Execution_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("api_v2.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0x6b, 0x27, 0x71, 0x92, 0x49, 0xe2, 0xa6, 0xa3, 0xdf, 0x0f, 0xac, 0x80, 0x50, 0xb1,
	0x40, 0xca, 0x05, 0x2b, 0xf2, 0x85, 0x03, 0x17, 0x2a, 0x25, 0x55, 0xa3, 0x82, 0x14, 0xd9, 0x39,
	0x20, 0x2e, 0xd5, 0xca, 0x5d, 0x82, 0xd5, 0xd4, 0x6b, 0x76, 0xd7, 0x15, 0x3c, 0x09, 0xcf, 0xc3,
	0x63, 0xf0, 0x36, 0xec, 0x1f, 0x07, 0x25, 0xa1, 0x22, 0xa2, 0xb7, 0x9d, 0xef, 0xce, 0xf7, 0x33,
	0xe3, 0xd9, 0x31, 0xf4, 0x49, 0x99, 0x5f, 0xdd, 0xc5, 0x51, 0xc9, 0x99, 0x64, 0xe8, 0xaf, 0x48,
	0xb5, 0xa2, 0xd1, 0x2d, 0x15, 0x82, 0xac, 0xa8, 0x08, 0xbf, 0x3b, 0x30, 0x9c, 0x7d, 0xa5, 0x59,
	0x25, 0x73, 0x56, 0x24, 0xf4, 0x4b, 0x45, 0x85, 0xc4, 0xff, 0xa0, 0x25, 0x4a, 0x9a, 0x89, 0xc0,
	0x39, 0x6d, 0x8c, 0xbb, 0x89, 0x0d, 0xf0, 0x0d, 0xb4, 0x3e, 0xad, 0xc9, 0x4a, 0x04, 0xae, 0x52,
	0x7b, 0xf1, 0xcb, 0x68, 0x17, 0x15, 0xed, 0x63, 0x22, 0x9d, 0x9d, 0x58, 0xcf, 0x68, 0x02, 0x4d,
	0x7d, 0x40, 0x84, 0x66, 0x41, 0x6e, 0xa9, 0x22, 0x3b, 0x8a, 0x6c, 0xce, 0xba, 0xdc, 0x1d, 0x59,
	0x57, 0x54, 0x81, 0xb5, 0x68, 0x83, 0xf0, 0xa7, 0x07, 0x27, 0x5b, 0x48, 0x51, 0xb2, 0x42, 0x50,
	0xbc, 0x84, 0xa6, 0xfc, 0x56, 0x6a, 0xbf, 0x3b, 0xf6, 0xe3, 0xd7, 0x7f, 0xe9, 0xc1, 0x1a, 0xfe,
	0x54, 0x96, 0xca, 0x9e, 0x18, 0x08, 0xfa, 0xe0, 0xce, 0xa7, 0x75, 0x55, 0x37, 0x9f, 0xe2, 0x5b,
	0xf0, 0x84, 0x24, 0xb2, 0x12, 0x41, 0x43, 0x69, 0x7e, 0x3c, 0x3e, 0x8c, 0x4f, 0x4d, 0x7e, 0x52,
	0xfb, 0xf0, 0x02, 0x3c, 0xca, 0x39, 0xe3, 0x22, 0x68, 0x9a, 0x21, 0x4d, 0xfe, 0xa1, 0xc1, 0x99,
	0x36, 0x26, 0xb5, 0x1f, 0x5f, 0xc0, 0x80, 0x6e, 0x6e, 0x96, 0xb9, 0x9a, 0x58, 0x4b, 0xb5, 0xd4,
	0x48, 0x76, 0x45, 0x7c, 0xa4, 0x3b, 0xbe, 0x66, 0x95, 0x0c, 0x3c, 0xf3, 0x15, 0x75, 0x84, 0x1f,
	0xc0, 0x2f, 0x39, 0xbd, 0x60, 0xec, 0xe6, 0x9c, 0xe4, 0xeb, 0x8a, 0xd3, 0xa0, 0xad, 0xee, 0x1f,
	0xd2, 0xcf, 0x1e, 0x07, 0x3f, 0xc2, 0x71, 0xc9, 0x84, 0xdc, 0x46, 0x77, 0x1e, 0x88, 0xde, 0x07,
	0x8d, 0x24, 0xf8, 0xbb, 0x29, 0xf8, 0x0c, 0x40, 0x4d, 0x36, 0xbb, 0x59, 0x72, 0x92, 0x6d, 0x96,
	0x66, 0x4b, 0xc1, 0x10, 0xfa, 0x66, 0x5e, 0xef, 0x6d, 0xd1, 0xfa, 0x2d, 0x77, 0x34, 0xc3, 0xc8,
	0x38, 0xa5, 0x45, 0xfa, 0x99, 0x49, 0xf3, 0xb2, 0xfd, 0x64, 0x4b, 0x09, 0x7f, 0x38, 0xf0, 0xff,
	0xbd, 0x5b, 0x82, 0x4f, 0x21, 0x48, 0xab, 0x5c, 0xd2, 0x29, 0x91, 0x24, 0x95, 0x8c, 0xd3, 0x79,
	0x91, 0x4b, 0x95, 0x51, 0xad, 0xe5, 0xf0, 0x48, 0x6d, 0x0f, 0x98, 0x5b, 0xb5, 0x02, 0x5c, 0x0e,
	0x1d, 0x7c, 0x02, 0x8f, 0x53, 0xf5, 0xa3, 0xdc, 0x97, 0xec, 0xe2, 0x00, 0xba, 0xfa, 0xd2, 0xe6,
	0x36, 0xf0, 0x04, 0x06, 0x69, 0x46, 0x0b, 0xc2, 0x73, 0x66, 0xa5, 0x26, 0x1e, 0x43, 0x6f, 0x23,
	0xcd, 0x8a, 0xeb, 0x61, 0x0b, 0x7b, 0xd0, 0xd6, 0x16, 0x1d, 0x78, 0xd8, 0x87, 0x8e, 0x29, 0xa6,
	0xa3, 0xb6, 0xce, 0xb5, 0x23, 0xb4, 0xf8, 0x4e, 0xf8, 0x0a, 0x3c, 0xbb, 0x89, 0x08, 0xe0, 0x2d,
	0xce, 0xd2, 0x74, 0x36, 0x55, 0x1d, 0xaa, 0xf3, 0xf9, 0xd9, 0xfc, 0x9d, 0x3a, 0x3b, 0x86, 0x76,
	0x39, 0x5f, 0x2c, 0x54, 0xe0, 0xc6, 0x57, 0xd0, 0xfd, 0xfd, 0xc5, 0x98, 0x40, 0xdb, 0x2e, 0x15,
	0xc5, 0xd3, 0x43, 0xff, 0xf4, 0xe8, 0xf9, 0xc1, 0x57, 0x0e, 0x8f, 0x26, 0xce, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x7a, 0x1f, 0x6e, 0x35, 0x75, 0x04, 0x00, 0x00,
}
