// Code generated by protoc-gen-go.
// source: api_v2.proto
// DO NOT EDIT!

package gauge_messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Specifies the execution status
type Result_Status int32

const (
	Result_PASSED  Result_Status = 0
	Result_FAILED  Result_Status = 1
	Result_SKIPPED Result_Status = 2
)

var Result_Status_name = map[int32]string{
	0: "PASSED",
	1: "FAILED",
	2: "SKIPPED",
}
var Result_Status_value = map[string]int32{
	"PASSED":  0,
	"FAILED":  1,
	"SKIPPED": 2,
}

func (x Result_Status) Enum() *Result_Status {
	p := new(Result_Status)
	*p = x
	return p
}
func (x Result_Status) String() string {
	return proto.EnumName(Result_Status_name, int32(x))
}
func (x *Result_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Result_Status_value, data, "Result_Status")
	if err != nil {
		return err
	}
	*x = Result_Status(value)
	return nil
}
func (Result_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

// Types of Execution respone
type ExecutionResponse_Type int32

const (
	ExecutionResponse_SuiteStart    ExecutionResponse_Type = 0
	ExecutionResponse_SpecStart     ExecutionResponse_Type = 1
	ExecutionResponse_ScenarioStart ExecutionResponse_Type = 2
	ExecutionResponse_ScenarioEnd   ExecutionResponse_Type = 3
	ExecutionResponse_SpecEnd       ExecutionResponse_Type = 4
	ExecutionResponse_SuiteEnd      ExecutionResponse_Type = 5
	ExecutionResponse_ErrorResult   ExecutionResponse_Type = 6
)

var ExecutionResponse_Type_name = map[int32]string{
	0: "SuiteStart",
	1: "SpecStart",
	2: "ScenarioStart",
	3: "ScenarioEnd",
	4: "SpecEnd",
	5: "SuiteEnd",
	6: "ErrorResult",
}
var ExecutionResponse_Type_value = map[string]int32{
	"SuiteStart":    0,
	"SpecStart":     1,
	"ScenarioStart": 2,
	"ScenarioEnd":   3,
	"SpecEnd":       4,
	"SuiteEnd":      5,
	"ErrorResult":   6,
}

func (x ExecutionResponse_Type) Enum() *ExecutionResponse_Type {
	p := new(ExecutionResponse_Type)
	*p = x
	return p
}
func (x ExecutionResponse_Type) String() string {
	return proto.EnumName(ExecutionResponse_Type_name, int32(x))
}
func (x *ExecutionResponse_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExecutionResponse_Type_value, data, "ExecutionResponse_Type")
	if err != nil {
		return err
	}
	*x = ExecutionResponse_Type(value)
	return nil
}
func (ExecutionResponse_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0} }

// ExecutionRequest defines the structure of requests that the API's consumers can send to request execution of specs/scenarios
type ExecutionRequest struct {
	// Each ExecutionRequest can ask to execute multiple spec files or multiple scenarios in a spec or a directory or all
	Specs []string `protobuf:"bytes,1,rep,name=specs" json:"specs,omitempty"`
	// Contains all the flags required for execution
	Flags            []*ExecutionRequestFlag `protobuf:"bytes,2,rep,name=flags" json:"flags,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *ExecutionRequest) Reset()                    { *m = ExecutionRequest{} }
func (m *ExecutionRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecutionRequest) ProtoMessage()               {}
func (*ExecutionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ExecutionRequest) GetSpecs() []string {
	if m != nil {
		return m.Specs
	}
	return nil
}

func (m *ExecutionRequest) GetFlags() []*ExecutionRequestFlag {
	if m != nil {
		return m.Flags
	}
	return nil
}

// Store name and value for a specific flag
type ExecutionRequestFlag struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExecutionRequestFlag) Reset()                    { *m = ExecutionRequestFlag{} }
func (m *ExecutionRequestFlag) String() string            { return proto.CompactTextString(m) }
func (*ExecutionRequestFlag) ProtoMessage()               {}
func (*ExecutionRequestFlag) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *ExecutionRequestFlag) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ExecutionRequestFlag) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Result struct {
	Status *Result_Status `protobuf:"varint,1,opt,name=status,enum=gauge.messages.Result_Status" json:"status,omitempty"`
	// Contains the Execution errors and its details
	Errors []*Result_ExecutionError `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
	// Specifies the execution time
	ExecutionTime *int64 `protobuf:"varint,3,opt,name=executionTime" json:"executionTime,omitempty"`
	// Contains the console output messages
	Stdout *string `protobuf:"bytes,4,opt,name=stdout" json:"stdout,omitempty"`
	// Holds the before hook failure
	BeforeHookFailure *Result_ExecutionError `protobuf:"bytes,5,opt,name=beforeHookFailure" json:"beforeHookFailure,omitempty"`
	// Holds the after hook failure
	AfterHookFailure *Result_ExecutionError `protobuf:"bytes,6,opt,name=afterHookFailure" json:"afterHookFailure,omitempty"`
	// Holds the table row number (starting with 1) against which the scenario was executed.
	// This field is populated only for data table driven scenarios.
	TableRowNumber   *int64 `protobuf:"varint,7,opt,name=tableRowNumber" json:"tableRowNumber,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Result) GetStatus() Result_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Result_PASSED
}

func (m *Result) GetErrors() []*Result_ExecutionError {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *Result) GetExecutionTime() int64 {
	if m != nil && m.ExecutionTime != nil {
		return *m.ExecutionTime
	}
	return 0
}

func (m *Result) GetStdout() string {
	if m != nil && m.Stdout != nil {
		return *m.Stdout
	}
	return ""
}

func (m *Result) GetBeforeHookFailure() *Result_ExecutionError {
	if m != nil {
		return m.BeforeHookFailure
	}
	return nil
}

func (m *Result) GetAfterHookFailure() *Result_ExecutionError {
	if m != nil {
		return m.AfterHookFailure
	}
	return nil
}

func (m *Result) GetTableRowNumber() int64 {
	if m != nil && m.TableRowNumber != nil {
		return *m.TableRowNumber
	}
	return 0
}

// ExecutionError represents the failure during execution along with details of failure
type Result_ExecutionError struct {
	// Error message from the failure
	ErrorMessage *string `protobuf:"bytes,1,opt,name=errorMessage" json:"errorMessage,omitempty"`
	// Stacktrace from the failure
	StackTrace *string `protobuf:"bytes,2,opt,name=stackTrace" json:"stackTrace,omitempty"`
	// Byte array holding the screenshot taken at the time of failure.
	Screenshot       []byte `protobuf:"bytes,3,opt,name=screenshot" json:"screenshot,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Result_ExecutionError) Reset()                    { *m = Result_ExecutionError{} }
func (m *Result_ExecutionError) String() string            { return proto.CompactTextString(m) }
func (*Result_ExecutionError) ProtoMessage()               {}
func (*Result_ExecutionError) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

func (m *Result_ExecutionError) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *Result_ExecutionError) GetStackTrace() string {
	if m != nil && m.StackTrace != nil {
		return *m.StackTrace
	}
	return ""
}

func (m *Result_ExecutionError) GetScreenshot() []byte {
	if m != nil {
		return m.Screenshot
	}
	return nil
}

// ExecutionResponse defines the structure of response for ExecutionRequest message
type ExecutionResponse struct {
	// Response type
	Type *ExecutionResponse_Type `protobuf:"varint,1,req,name=type,enum=gauge.messages.ExecutionResponse_Type" json:"type,omitempty"`
	// An identifier for the current execution result. This field is populated only for spec/scenario result.
	// For spec, the value will be the filename.
	// For scenario, the value will be filename:scenario_heading_line_num.
	ID *string `protobuf:"bytes,2,opt,name=ID,json=iD" json:"ID,omitempty"`
	// Contains all the result details. This field is populated only for ScenarioStart, ScenaioEnd, SpecEnd, SuiteEnd, ErrorResult
	Result           *Result `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExecutionResponse) Reset()                    { *m = ExecutionResponse{} }
func (m *ExecutionResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecutionResponse) ProtoMessage()               {}
func (*ExecutionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ExecutionResponse) GetType() ExecutionResponse_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ExecutionResponse_SuiteStart
}

func (m *ExecutionResponse) GetID() string {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return ""
}

func (m *ExecutionResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*ExecutionRequest)(nil), "gauge.messages.ExecutionRequest")
	proto.RegisterType((*ExecutionRequestFlag)(nil), "gauge.messages.ExecutionRequest.flag")
	proto.RegisterType((*Result)(nil), "gauge.messages.Result")
	proto.RegisterType((*Result_ExecutionError)(nil), "gauge.messages.Result.ExecutionError")
	proto.RegisterType((*ExecutionResponse)(nil), "gauge.messages.ExecutionResponse")
	proto.RegisterEnum("gauge.messages.Result_Status", Result_Status_name, Result_Status_value)
	proto.RegisterEnum("gauge.messages.ExecutionResponse_Type", ExecutionResponse_Type_name, ExecutionResponse_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Execution service

type ExecutionClient interface {
	// Bind RPC method
	Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (Execution_ExecuteClient, error)
}

type executionClient struct {
	cc *grpc.ClientConn
}

func NewExecutionClient(cc *grpc.ClientConn) ExecutionClient {
	return &executionClient{cc}
}

func (c *executionClient) Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (Execution_ExecuteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Execution_serviceDesc.Streams[0], c.cc, "/gauge.messages.Execution/execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &executionExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Execution_ExecuteClient interface {
	Recv() (*ExecutionResponse, error)
	grpc.ClientStream
}

type executionExecuteClient struct {
	grpc.ClientStream
}

func (x *executionExecuteClient) Recv() (*ExecutionResponse, error) {
	m := new(ExecutionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Execution service

type ExecutionServer interface {
	// Bind RPC method
	Execute(*ExecutionRequest, Execution_ExecuteServer) error
}

func RegisterExecutionServer(s *grpc.Server, srv ExecutionServer) {
	s.RegisterService(&_Execution_serviceDesc, srv)
}

func _Execution_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecutionServer).Execute(m, &executionExecuteServer{stream})
}

type Execution_ExecuteServer interface {
	Send(*ExecutionResponse) error
	grpc.ServerStream
}

type executionExecuteServer struct {
	grpc.ServerStream
}

func (x *executionExecuteServer) Send(m *ExecutionResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Execution_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gauge.messages.Execution",
	HandlerType: (*ExecutionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execute",
			Handler:       _Execution_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("api_v2.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x5d, 0xd2, 0x34, 0x63, 0xb7, 0x5d, 0x69, 0xaf, 0xd0, 0x54, 0x55, 0x02, 0x8d, 0x08, 0x26,
	0x5e, 0x88, 0xa6, 0x4a, 0xbc, 0x80, 0x78, 0x98, 0xd4, 0x4e, 0x54, 0x7c, 0xa8, 0x38, 0x7d, 0x9f,
	0xdc, 0xec, 0xb6, 0x44, 0x6b, 0xe3, 0x62, 0x3b, 0x03, 0xfe, 0x00, 0x7f, 0x81, 0xdf, 0xc1, 0x3f,
	0xc4, 0xb1, 0xd3, 0xa9, 0xed, 0x80, 0xc1, 0x9b, 0xef, 0xc9, 0x39, 0xc7, 0xe7, 0xde, 0xeb, 0x40,
	0x93, 0xaf, 0xb2, 0x8b, 0xeb, 0x7e, 0xbc, 0x92, 0x42, 0x0b, 0x6c, 0xcd, 0x79, 0x31, 0xa7, 0x78,
	0x49, 0x4a, 0xf1, 0x39, 0xa9, 0xe8, 0x87, 0x07, 0xed, 0xe1, 0x57, 0x4a, 0x0b, 0x9d, 0x89, 0x9c,
	0xd1, 0xe7, 0x82, 0x94, 0xc6, 0x07, 0x50, 0x57, 0x2b, 0x4a, 0x55, 0xd7, 0x3b, 0xae, 0x3d, 0x3b,
	0x60, 0xae, 0xc0, 0x57, 0x50, 0x9f, 0x2d, 0xf8, 0x5c, 0x75, 0x7d, 0x83, 0x36, 0xfa, 0x4f, 0xe3,
	0x6d, 0xab, 0x78, 0xd7, 0x26, 0x2e, 0xd9, 0xcc, 0x69, 0x7a, 0xa7, 0x10, 0x94, 0x07, 0x44, 0x08,
	0x72, 0xbe, 0x24, 0xe3, 0xec, 0x19, 0x67, 0x7b, 0x2e, 0xaf, 0xbb, 0xe6, 0x8b, 0x82, 0x8c, 0x71,
	0x09, 0xba, 0x22, 0xfa, 0x19, 0x40, 0xc8, 0x48, 0x15, 0x0b, 0x8d, 0x2f, 0x20, 0x54, 0x9a, 0xeb,
	0x42, 0x59, 0x59, 0xab, 0xff, 0x70, 0xf7, 0x6a, 0xc7, 0x8b, 0x13, 0x4b, 0x62, 0x15, 0x19, 0x5f,
	0x43, 0x48, 0x52, 0x0a, 0xf9, 0xc7, 0xc4, 0x95, 0xec, 0x26, 0xf8, 0xb0, 0x64, 0xb3, 0x4a, 0x84,
	0x4f, 0xe0, 0x90, 0xd6, 0x5f, 0x26, 0x99, 0xc9, 0x5c, 0x33, 0x97, 0xd7, 0xd8, 0x36, 0x88, 0x47,
	0x65, 0xb6, 0x4b, 0x51, 0xe8, 0x6e, 0x60, 0xd3, 0x57, 0x15, 0x26, 0xd0, 0x99, 0xd2, 0x4c, 0x48,
	0x7a, 0x23, 0xc4, 0xd5, 0x39, 0xcf, 0x16, 0x85, 0xa4, 0x6e, 0xdd, 0x50, 0xfe, 0x39, 0xc7, 0x6d,
	0x3d, 0x7e, 0x84, 0x36, 0x9f, 0x69, 0x92, 0x9b, 0x9e, 0xe1, 0xff, 0x78, 0xde, 0x92, 0xe3, 0x09,
	0xb4, 0x34, 0x9f, 0x2e, 0x88, 0x89, 0x2f, 0x1f, 0x8a, 0xe5, 0x94, 0x64, 0x77, 0xdf, 0xb6, 0xb9,
	0x83, 0xf6, 0x34, 0xb4, 0xb6, 0xbd, 0x30, 0x82, 0xa6, 0x9d, 0xd4, 0x7b, 0x77, 0x65, 0xb5, 0xd2,
	0x2d, 0x0c, 0x1f, 0x01, 0x98, 0x65, 0xa4, 0x57, 0x13, 0xc9, 0xd3, 0xf5, 0x7e, 0x37, 0x10, 0xfb,
	0x3d, 0x95, 0x44, 0xb9, 0xfa, 0x24, 0xb4, 0x1d, 0x70, 0x93, 0x6d, 0x20, 0xd1, 0x73, 0x08, 0xdd,
	0x52, 0x11, 0x20, 0x1c, 0x9f, 0x25, 0xc9, 0x70, 0xd0, 0xde, 0x2b, 0xcf, 0xe7, 0x67, 0xa3, 0x77,
	0xe6, 0xec, 0x61, 0x03, 0xf6, 0x93, 0xb7, 0xa3, 0xf1, 0xd8, 0x14, 0x7e, 0xf4, 0xdd, 0x87, 0xce,
	0xc6, 0x33, 0x54, 0x2b, 0x91, 0x2b, 0xc2, 0x97, 0x10, 0xe8, 0x6f, 0xab, 0x32, 0xa0, 0x6f, 0x1e,
	0xcf, 0xc9, 0x5f, 0xde, 0xad, 0x13, 0xc4, 0x13, 0xc3, 0x66, 0x56, 0x83, 0x2d, 0xf0, 0x47, 0x83,
	0x2a, 0xb8, 0x9f, 0x0d, 0x30, 0x86, 0x50, 0xda, 0xc9, 0xda, 0xb0, 0x8d, 0xfe, 0xd1, 0xef, 0xe7,
	0xce, 0x2a, 0x56, 0x54, 0x40, 0x30, 0x71, 0x3e, 0x90, 0x14, 0x99, 0x26, 0xd3, 0x8d, 0xd4, 0xa6,
	0x85, 0x43, 0x38, 0x48, 0xcc, 0x5f, 0xe5, 0x4a, 0x0f, 0x3b, 0x70, 0x98, 0xa4, 0x94, 0x73, 0x99,
	0x09, 0x07, 0xf9, 0x78, 0x1f, 0x1a, 0x6b, 0x68, 0x98, 0x5f, 0xb6, 0x6b, 0xb6, 0x53, 0x23, 0x29,
	0x8b, 0x00, 0x9b, 0x70, 0xcf, 0xfa, 0x95, 0x55, 0xbd, 0xe4, 0xba, 0xfd, 0xda, 0x4b, 0xdb, 0x61,
	0xff, 0x02, 0x0e, 0x6e, 0xda, 0x42, 0x06, 0xfb, 0xee, 0xcd, 0x12, 0x1e, 0xdf, 0xf5, 0xd3, 0xf6,
	0x1e, 0xdf, 0x39, 0x9e, 0x68, 0xef, 0xd4, 0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0x76, 0xd4, 0xec,
	0x88, 0x56, 0x04, 0x00, 0x00,
}
