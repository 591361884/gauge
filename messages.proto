package main;

message ExecutionStatus {
	required bool passed = 1;
	optional bool recoverableError = 2;
	optional string errorMessage = 3;
	optional string stackTrace = 4;
	optional bytes screenShot = 5;
}

// Sends to any request which needs a execution status as response
message ExecutionStatusResponse {
	required ExecutionStatus executionStatus = 1;
}

message ExecutionStartingRequest {
	required string specFile = 1;
}

message SpecExecutionStartingRequest {
	required string specName = 1;
	required string specFile = 2;
}

message SpecExecutionEndingRequest {
	required string specName = 1;
	required string specFile = 2;
}

message ExecuteStepRequest {
	required string stepText = 1;
	optional bool scenarioFailing = 2;
	repeated Argument args = 3;
}

message ProtoTable {
    repeated TableRow rows = 1;
}

message TableRow {
    repeated string cells = 1;
}

message Argument {
    required string type = 1;
    optional string value = 2;
    optional ProtoTable table  = 3;
}

message ExecuteStepResponse {
	required bool passed = 2;
	optional bool recoverableError = 3;
	optional string errorMessage = 4;
	optional string stackTrace = 5;
	optional bytes screenShot = 6;
}

message StepValidateRequest {
	required string stepText = 1;
}

message StepValidateResponse {
	required bool isValid = 1;
}

message ExecutionEndingRequest {
}

// This is the message which gets transferred all the time 
// with proper message type set
message Message {
	enum MessageType {
	    ExecutionStarting = 0;
	    SpecExecutionStarting = 1;
	    SpecExecutionEnding = 2;	    
	    ExecuteStep = 3;
	    ExecuteStepResponse = 4;
	    ExecutionEnding = 5;
	    StepValidateRequest = 6;
	    StepValidateResponse = 7;
	    ExecutionStatusResponse = 8;
	}
  	
  	required MessageType messageType = 1;
  	
	// A unique id to represent this message. A response to the message should copy over this value
	// this is used to synchronize messages & responses
  	required int64 messageId = 2;

  	// One of the following will have a value
  	optional ExecutionStartingRequest executionStartingRequest = 3;
  	optional SpecExecutionStartingRequest specExecutionStartingRequest = 4;  	
  	optional SpecExecutionEndingRequest specExecutionEndingRequest = 5;  	
  	optional ExecuteStepRequest executeStepRequest = 6;
  	optional ExecuteStepResponse executeStepResponse = 7;
  	optional ExecutionEndingRequest executionEndingRequest = 8;
  	optional StepValidateRequest stepValidateRequest = 9;
  	optional StepValidateResponse stepValidateResponse = 10;
  	optional ExecutionStatusResponse executionStatusResponse = 11;
}

